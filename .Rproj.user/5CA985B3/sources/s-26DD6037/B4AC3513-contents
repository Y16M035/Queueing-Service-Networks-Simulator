createArrival <- function(data,i){
  arrival<-list(lambda=0,id=-2, nodes=0)
  finished=0
  while(finished==0 && i<length(data)+1){
    line<-data[i]
    first<-trimws(strsplit(line,":")[[1]][1])
    second<-trimws(strsplit(line,":")[[1]][2])
    if(first=="lambda"){
      arrival$lambda=as.numeric(second)
    }
    else if (first=="entry id"){
      arrival$id=second
    }
    else if (first=="number of nodes"){
      arrival$nodes=strtoi(second)
    }
    else if (first=="NODE"){
      finished=1
    }
    i<-i+1
  }
  return(list(arrival,i))
}

createNode <- function(data,i,n){
  node <- list(id=-1,type="MM1",mu=0, QCost=0, SCost=0, ICost=0, Rev=0, T=integer(n))
  finished=0
  while(finished==0 && i<length(data)+1){
    line<-data[i]
    first<-trimws(strsplit(line,":")[[1]][1])
    second<-trimws(strsplit(line,":")[[1]][2])
    if (first=="id"){
      node$id=second
    }
    else if (first=="type"){
      node$type=second
    }
    else if (first=="mu"){
      node$mu=as.numeric(second)
    }
    else if (first=="queue cost per client"){
      node$QCost=as.numeric(second)
    }
    else if (first=="service cost per client"){
      node$SCost=as.numeric(second)
    }
    else if (first=="infrastructure cost"){
      node$ICost=as.numeric(second)
    }
    else if (first=="service revenue per client"){
      node$Rev=as.numeric(second)
    }
    else if (first=="transitions"){
      transitions<-strsplit(second,",")[[1]]
      for (entry in transitions){
        print(entry)
        id<-strtoi(trimws(strsplit(entry,"-")[[1]][1]))
        p<-as.numeric(trimws(strsplit(entry,"-")[[1]][2]))
        node$T[id]=p
      }
    }
    else if (first=="NODE"){
      finished=1
    }
    i<-i+1
  }
  return(list(node,i))
}

data <- readLines("text")
data <-data[which(data!="")]
i=1
if(data[1]=="ARRIVAL"){
  result<-createArrival(data,i+1)
  arrival<-result[[1]]
  i<-result[[2]]
  nodes<-vector(mode="list",length=arrival$nodes)
  m=1
  while(i<length(data)+1){
    result<-createNode(data,i,arrival$nodes)
    node<-result[[1]]
    nodes[m]<-list(node)
    i<-result[[2]]
    m=m+1
  }
}



